/*
 * FILE : O:\src\pywin32\com\win32comext\mapi\src\mapi.cpp
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Patch 5)
 * 
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
/* Implementation : PYTHON */

#define SWIGPYTHON
#include <string.h>
#include <stdlib.h>
/***********************************************************************
 * $Header$
 * swig_lib/python/python.cfg
 *
 * This file contains coded needed to add variable linking to the
 * Python interpreter.   C variables are added as a new kind of Python
 * datatype.
 *
 * Also contains supporting code for building python under Windows
 * and things like that.
 *
 * $Log$
 * Revision 1.1  2000/03/14 23:34:06  mhammond
 * Needed to modify a standard Swig file to avoid the 'extern "C"' around Python.h (which gets upset when it tries to include whcar.h as part of the new Unicode patches)
 *
 ************************************************************************/

#include "Python.h"

/* Definitions for Windows/Unix exporting */
#if defined(__WIN32__)
#   if defined(_MSC_VER)
#	define SWIGEXPORT(a,b) __declspec(dllexport) a b
#   else
#	if defined(__BORLANDC__)
#	    define SWIGEXPORT(a,b) a _export b
#	else
#	    define SWIGEXPORT(a,b) a b
#	endif
#   endif
#else
#   define SWIGEXPORT(a,b) a b
#endif

#ifdef SWIG_GLOBAL
#ifdef __cplusplus
#define SWIGSTATIC extern "C"
#else
#define SWIGSTATIC
#endif
#endif

#ifndef SWIGSTATIC
#define SWIGSTATIC static
#endif

#ifdef NEED_SWIG_VARLINK

typedef struct {
  char  *name;
  PyObject *(*get_attr)(void);
  int (*set_attr)(PyObject *);
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar **vars;
  int      nvars;
  int      maxvars;
} swig_varlinkobject;

/* ----------------------------------------------------------------------
   swig_varlink_repr()

   Function for python repr method
   ---------------------------------------------------------------------- */

static PyObject *
swig_varlink_repr(swig_varlinkobject *v)
{
  v = v;
  return PyString_FromString("<Global variables>");
}

/* ---------------------------------------------------------------------
   swig_varlink_print()

   Print out all of the global variable names
   --------------------------------------------------------------------- */

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags)
{

  int i = 0;
  flags = flags;
  fprintf(fp,"Global variables { ");
  while (v->vars[i]) {
    fprintf(fp,"%s", v->vars[i]->name);
    i++;
    if (v->vars[i]) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

/* --------------------------------------------------------------------
   swig_varlink_getattr
 
   This function gets the value of a variable and returns it as a
   PyObject.   In our case, we'll be looking at the datatype and
   converting into a number or string
   -------------------------------------------------------------------- */

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n)
{
  int i = 0;
  char temp[128];

  while (v->vars[i]) {
    if (strcmp(v->vars[i]->name,n) == 0) {
      return (*v->vars[i]->get_attr)();
    }
    i++;
  }
  sprintf(temp,"C global variable %s not found.", n);
  PyErr_SetString(PyExc_NameError,temp);
  return NULL;
}

/* -------------------------------------------------------------------
   swig_varlink_setattr()

   This function sets the value of a variable.
   ------------------------------------------------------------------- */

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p)
{
  char temp[128];
  int i = 0;
  while (v->vars[i]) {
    if (strcmp(v->vars[i]->name,n) == 0) {
      return (*v->vars[i]->set_attr)(p);
    }
    i++;
  }
  sprintf(temp,"C global variable %s not found.", n);
  PyErr_SetString(PyExc_NameError,temp);
  return 1;
}

statichere PyTypeObject varlinktype = {
/*  PyObject_HEAD_INIT(&PyType_Type)  Note : This doesn't work on some machines */
  PyObject_HEAD_INIT(0)              
  0,
  "varlink",                          /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */

SWIGSTATIC PyObject *
SWIG_newvarlink(void)
{
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  /*  _Py_NewReference(result);  Does not seem to be necessary */
  result->nvars = 0;
  result->maxvars = 64;
  result->vars = (swig_globalvar **) malloc(64*sizeof(swig_globalvar *));
  result->vars[0] = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGSTATIC void
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p))
{
  swig_varlinkobject *v;
  v= (swig_varlinkobject *) p;
	
  if (v->nvars >= v->maxvars -1) {
    v->maxvars = 2*v->maxvars;
    v->vars = (swig_globalvar **) realloc(v->vars,v->maxvars*sizeof(swig_globalvar *));
    if (v->vars == NULL) {
      fprintf(stderr,"SWIG : Fatal error in initializing Python module.\n");
      exit(1);
    }
  }
  v->vars[v->nvars] = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  v->vars[v->nvars]->name = (char *) malloc(strlen(name)+1);
  strcpy(v->vars[v->nvars]->name,name);
  v->vars[v->nvars]->get_attr = get_attr;
  v->vars[v->nvars]->set_attr = set_attr;
  v->nvars++;
  v->vars[v->nvars] = 0;
}

#else
#define SWIG_newvarlink() Py_None
#endif /* SWIG_NEED_VARLINK */
#ifdef NEED_SWIG_PTR
/*****************************************************************************
 * $Header$
 *
 * swigptr.swg
 *
 * This file contains supporting code for the SWIG run-time type checking
 * mechanism.  The following functions are available :
 *
 * SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *));
 *
 *      Registers a new type-mapping with the type-checker.  origtype is the
 *      original datatype and newtype is an equivalent type.  cast is optional
 *      pointer to a function to cast pointer values between types (this
 *      is typically used to cast pointers from derived classes to base classes in C++)
 *      
 * SWIG_MakePtr(char *buffer, void *ptr, char *typestring);
 *     
 *      Makes a pointer string from a pointer and typestring.  The result is returned
 *      in buffer which is assumed to hold enough space for the result.
 *
 * char * SWIG_GetPtr(char *buffer, void **ptr, char *type)
 *
 *      Gets a pointer value from a string.  If there is a type-mismatch, returns
 *      a character string to the received type.  On success, returns NULL.
 *
 *
 * You can remap these functions by making a file called "swigptr.swg" in
 * your the same directory as the interface file you are wrapping.
 *
 * These functions are normally declared static, but this file can be
 * can be used in a multi-module environment by redefining the symbol
 * SWIGSTATIC.
 *****************************************************************************/

#include <stdlib.h>

#ifdef SWIG_GLOBAL
#ifdef __cplusplus
#define SWIGSTATIC extern "C"
#else
#define SWIGSTATIC
#endif
#endif

#ifndef SWIGSTATIC
#define SWIGSTATIC static
#endif


/* SWIG pointer structure */

typedef struct SwigPtrType {
  char               *name;               /* Datatype name                  */
  int                 len;                /* Length (used for optimization) */
  void               *(*cast)(void *);    /* Pointer casting function       */
  struct SwigPtrType *next;               /* Linked list pointer            */
} SwigPtrType;

/* Pointer cache structure */

typedef struct {
  int                 stat;               /* Status (valid) bit             */
  SwigPtrType        *tp;                 /* Pointer to type structure      */
  char                name[256];          /* Given datatype name            */
  char                mapped[256];        /* Equivalent name                */
} SwigCacheType;

/* Some variables  */

static int SwigPtrMax  = 64;           /* Max entries that can be currently held */
                                       /* This value may be adjusted dynamically */
static int SwigPtrN    = 0;            /* Current number of entries              */
static int SwigPtrSort = 0;            /* Status flag indicating sort            */
static int SwigStart[256];             /* Starting positions of types            */

/* Pointer table */
static SwigPtrType *SwigPtrTable = 0;  /* Table containing pointer equivalences  */

/* Cached values */

#define SWIG_CACHESIZE  8
#define SWIG_CACHEMASK  0x7
static SwigCacheType SwigCache[SWIG_CACHESIZE];  
static int SwigCacheIndex = 0;
static int SwigLastCache = 0;

/* Sort comparison function */
static int swigsort(const void *data1, const void *data2) {
	SwigPtrType *d1 = (SwigPtrType *) data1;
	SwigPtrType *d2 = (SwigPtrType *) data2;
	return strcmp(d1->name,d2->name);
}

/* Binary Search function */
static int swigcmp(const void *key, const void *data) {
  char *k = (char *) key;
  SwigPtrType *d = (SwigPtrType *) data;
  return strncmp(k,d->name,d->len);
}

/* Register a new datatype with the type-checker */

SWIGSTATIC 
void SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *)) {

  int i;
  SwigPtrType *t = 0,*t1;

  /* Allocate the pointer table if necessary */

  if (!SwigPtrTable) {     
    SwigPtrTable = (SwigPtrType *) malloc(SwigPtrMax*sizeof(SwigPtrType));
    SwigPtrN = 0;
  }
  /* Grow the table */
  if (SwigPtrN >= SwigPtrMax) {
    SwigPtrMax = 2*SwigPtrMax;
    SwigPtrTable = (SwigPtrType *) realloc((char *) SwigPtrTable,SwigPtrMax*sizeof(SwigPtrType));
  }
  for (i = 0; i < SwigPtrN; i++)
    if (strcmp(SwigPtrTable[i].name,origtype) == 0) {
      t = &SwigPtrTable[i];
      break;
    }
  if (!t) {
    t = &SwigPtrTable[SwigPtrN];
    t->name = origtype;
    t->len = strlen(t->name);
    t->cast = 0;
    t->next = 0;
    SwigPtrN++;
  }

  /* Check for existing entry */

  while (t->next) {
    if ((strcmp(t->name,newtype) == 0)) {
      if (cast) t->cast = cast;
      return;
    }
    t = t->next;
  }
  
  /* Now place entry (in sorted order) */

  t1 = (SwigPtrType *) malloc(sizeof(SwigPtrType));
  t1->name = newtype;
  t1->len = strlen(t1->name);
  t1->cast = cast;
  t1->next = 0;            
  t->next = t1;           
  SwigPtrSort = 0;
}

/* Make a pointer value string */

SWIGSTATIC 
void SWIG_MakePtr(char *_c, const void *_ptr, char *type) {
  static char _hex[16] =
  {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
   'a', 'b', 'c', 'd', 'e', 'f'};
  unsigned long _p, _s;
  char _result[20], *_r;    /* Note : a 64-bit hex number = 16 digits */
  _r = _result;
  _p = (unsigned long) _ptr;
  if (_p > 0) {
    while (_p > 0) {
      _s = _p & 0xf;
      *(_r++) = _hex[_s];
      _p = _p >> 4;
    }
    *_r = '_';
    while (_r >= _result)
      *(_c++) = *(_r--);
  } else {
    strcpy (_c, "NULL");
  }
  if (_ptr)
    strcpy (_c, type);
}

/* Define for backwards compatibility */

#define _swig_make_hex   SWIG_MakePtr 

/* Function for getting a pointer value */

SWIGSTATIC 
char *SWIG_GetPtr(char *_c, void **ptr, char *_t)
{
  unsigned long _p;
  char temp_type[256];
  char *name;
  int  i, len;
  SwigPtrType *sp,*tp;
  SwigCacheType *cache;
  int  start, end;
  _p = 0;

  /* Pointer values must start with leading underscore */
  if (*_c == '_') {
      _c++;
      /* Extract hex value from pointer */
      while (*_c) {
	  if ((*_c >= '0') && (*_c <= '9'))
	    _p = (_p << 4) + (*_c - '0');
	  else if ((*_c >= 'a') && (*_c <= 'f'))
	    _p = (_p << 4) + ((*_c - 'a') + 10);
	  else
	    break;
	  _c++;
      }

      if (_t) {
	if (strcmp(_t,_c)) { 
	  if (!SwigPtrSort) {
	    qsort((void *) SwigPtrTable, SwigPtrN, sizeof(SwigPtrType), swigsort); 
	    for (i = 0; i < 256; i++) {
	      SwigStart[i] = SwigPtrN;
	    }
	    for (i = SwigPtrN-1; i >= 0; i--) {
	      SwigStart[(int) (SwigPtrTable[i].name[1])] = i;
	    }
	    for (i = 255; i >= 1; i--) {
	      if (SwigStart[i-1] > SwigStart[i])
		SwigStart[i-1] = SwigStart[i];
	    }
	    SwigPtrSort = 1;
	    for (i = 0; i < SWIG_CACHESIZE; i++)  
	      SwigCache[i].stat = 0;
	  }
	  
	  /* First check cache for matches.  Uses last cache value as starting point */
	  cache = &SwigCache[SwigLastCache];
	  for (i = 0; i < SWIG_CACHESIZE; i++) {
	    if (cache->stat) {
	      if (strcmp(_t,cache->name) == 0) {
		if (strcmp(_c,cache->mapped) == 0) {
		  cache->stat++;
		  *ptr = (void *) _p;
		  if (cache->tp->cast) *ptr = (*(cache->tp->cast))(*ptr);
		  return (char *) 0;
		}
	      }
	    }
	    SwigLastCache = (SwigLastCache+1) & SWIG_CACHEMASK;
	    if (!SwigLastCache) cache = SwigCache;
	    else cache++;
	  }
	  /* We have a type mismatch.  Will have to look through our type
	     mapping table to figure out whether or not we can accept this datatype */

	  start = SwigStart[(int) _t[1]];
	  end = SwigStart[(int) _t[1]+1];
	  sp = &SwigPtrTable[start];
	  while (start < end) {
	    if (swigcmp(_t,sp) == 0) break;
	    sp++;
	    start++;
	  }
	  if (start >= end) sp = 0;
	  /* Try to find a match for this */
	  if (sp) {
	    while (swigcmp(_t,sp) == 0) {
	      name = sp->name;
	      len = sp->len;
	      tp = sp->next;
	      /* Try to find entry for our given datatype */
	      while(tp) {
		if (tp->len >= 255) {
		  return _c;
		}
		strncpy(temp_type,tp->name,255);
		strncat(temp_type,_t+len,255-tp->len);
		if (strcmp(_c,temp_type) == 0) {
		  
		  strcpy(SwigCache[SwigCacheIndex].mapped,_c);
		  strcpy(SwigCache[SwigCacheIndex].name,_t);
		  SwigCache[SwigCacheIndex].stat = 1;
		  SwigCache[SwigCacheIndex].tp = tp;
		  SwigCacheIndex = SwigCacheIndex & SWIG_CACHEMASK;
		  
		  /* Get pointer value */
		  *ptr = (void *) _p;
		  if (tp->cast) *ptr = (*(tp->cast))(*ptr);
		  return (char *) 0;
		}
		tp = tp->next;
	      }
	      sp++;
	      /* Hmmm. Didn't find it this time */
	    }
	  }
	  /* Didn't find any sort of match for this data.  
	     Get the pointer value and return the received type */
	  *ptr = (void *) _p;
	  return _c;
	} else {
	  /* Found a match on the first try.  Return pointer value */
	  *ptr = (void *) _p;
	  return (char *) 0;
	}
      } else {
	/* No type specified.  Good luck */
	*ptr = (void *) _p;
	return (char *) 0;
      }
  } else {
    if (strcmp (_c, "NULL") == 0) {
	*ptr = (void *) 0;
	return (char *) 0;
    }
    *ptr = (void *) 0;	
    return _c;
  }
}

/* Compatibility mode */

#define _swig_get_hex  SWIG_GetPtr

#else
#define SWIG_RegisterMapping(a,b,c)
#endif // NEED_SWIG_PTR
#define SWIG_init    initmapi

#define SWIG_name    "mapi"

static PyObject* t_output_helper(PyObject* target, PyObject* o) {
    PyObject*   o2;
    PyObject*   o3;

    if (!target) {                   
        target = o;
    } else if (target == Py_None) {  
        Py_DECREF(Py_None);
        target = o;
    } else {                            
        if (!PyTuple_Check(target)) {   
            o2 = target;
            target = PyTuple_New(1);
            PyTuple_SetItem(target, 0, o2);
        }
        o3 = PyTuple_New(1);            
        PyTuple_SetItem(o3, 0, o);      

        o2 = target;
        target = PySequence_Concat(o2, o3); 
        Py_DECREF(o2);                      
        Py_DECREF(o3);
    }
    return target;
}

#include "PyWinTypes.h"
#ifdef NEED_PYWINOBJECTS_H
#include "PyWinObjects.h"
#endif
#include "tchar.h"
typedef BOOL  BOOLAPI;
typedef DWORD  DWORDAPI;

#define PyHANDLE HANDLE // Use a #define so we can undef it later if we need the true defn.
//typedef HANDLE PyHKEY;

#include "PythonCOM.h"

#define SWIG_PYTHONCOM
typedef long  HRESULT_KEEP;
typedef long  HRESULT_KEEP_INFO;

#define MAKE_OUTPUT_INTERFACE(source, target, iid) \
{ \
    PyObject *o; \
    o = PyCom_PyObjectFromIUnknown(*source, iid, FALSE /* bAddRef */); \
    if (target==NULL) \
      target = o; \
	else if (target == Py_None) { /* has been incref'd already!*/ \
		Py_DECREF(Py_None); \
		target = o; \
    } else { \
      if (!PyList_Check(target)) { \
        PyObject *o2 = target; \
        target = PyList_New(0); \
        PyList_Append(target,o2); \
        Py_XDECREF(o2); \
      } \
      PyList_Append(target,o); \
      Py_XDECREF(o); \
    } \
}

#include "pymapiutil.h"

#include "PythonCOMServer.h"
#include "PythonCOMRegister.h"
#include <mapiutil.h>
#include "PyIMAPIProp.h"
#include "PyIMAPIStatus.h"
#include "PyIMAPITable.h"
#include "PyIMAPISession.h"
#include "PyIMAPIContainer.h"
#include "PyIMAPIFolder.h"
#include "PyIMessage.h"
#include "PyIMsgStore.h"
#include "PyIAttach.h"
#include "PyIProfAdmin.h"
#include "PyIAddrBook.h"
#include "PyIMailUser.h"
#include "PyIDistList.h"
#include "PyIABContainer.h"
#include "PyIProfSect.h"
#include "PyIMsgServiceAdmin.h"
#include "PyIMAPIAdviseSink.h"
#include "IConverterSession.h"
#include "PyIConverterSession.h"

#include "MAPISPI.H"
#include "MAPISPI.H"
#include "IMESSAGE.H"

static int AddIID(PyObject *dict, const char *key, REFGUID guid)
{
	PyObject *obiid = PyWinObject_FromIID(guid);
	if (!obiid) return 1;
	int rc = PyDict_SetItemString(dict, (char*)key, obiid);
	Py_DECREF(obiid);
	return rc;
}

#define ADD_CONSTANT(tok) AddConstant(dict, #tok, tok)
#define ADD_IID(tok) AddIID(d, #tok, tok)


// @pyswig <o PyUnicode>|HexFromBin|converts a binary number into a string representation of a hexadecimal number.
// @comm Note: This function may not be supported in future versions of MAPI.
static PyObject *PyHexFromBin(PyObject *self, PyObject *args) 
{
	char *szData;
	int dataSize;
	// @pyparm string|val||Converts an EntryID into a hex string representation.
	if (!PyArg_ParseTuple(args, "s#:HexFromBin", &szData, &dataSize))
		return NULL;
	TCHAR *buf = (TCHAR *)malloc(((dataSize*sizeof(TCHAR))*2)+1);
	HexFromBin((LPBYTE)szData, dataSize, buf);
	PyObject *result;
	result = PyWinObject_FromTCHAR(buf);
	free(buf);
	return result;
}

// @pyswig <o PyUnicode>|BinFromHex|converts a hexadecimal number into a binary string
static PyObject *PyBinFromHex(PyObject *self, PyObject *args) 
{
	PyObject *obHex;
	// @pyparm string/<o PyUnicode>|val||The string to be converted.
	if (!PyArg_ParseTuple(args, "O:BinFromHex", &obHex))
		return NULL;
	DWORD strSize;
	TCHAR *tchar;
	if (!PyWinObject_AsTCHAR( obHex, &tchar, FALSE, &strSize ))
		return NULL;

	BYTE *buf = (BYTE *)malloc(((strSize*sizeof(TCHAR))/2)+1);
	if (!FBinFromHex(tchar, buf)) {
		PyErr_SetString(PyExc_ValueError, "FBinFromHex failed - input data is invalid");
		return NULL;
	}
	PyObject *rc = PyString_FromStringAndSize((char *)buf, strSize/2);
	free(buf);
	PyWinObject_FreeTCHAR(tchar);
	return rc;
}

// @pyswig |MAPIUninitialize|Decrements the reference count, cleans up, and deletes per-instance global data for the MAPI DLL.
static PyObject *PyMAPIUninitialize(PyObject *self, PyObject *args)
{
	if (!PyArg_ParseTuple(args, ":MAPIUninitialize"))
		return NULL;
	PyObject *rc;
	__try {
		MAPIUninitialize();
		rc = Py_None;
		Py_INCREF(Py_None);
	}
	__except (GetExceptionCode() == STATUS_INVALID_HANDLE) {
		PyWin_SetAPIError("MAPIUninitialize", ERROR_INVALID_HANDLE);
		rc = NULL;
	}
	return rc;
}


PyObject *MAPIUIDFromBinary(PyObject *self, PyObject *args)
{
	char *szVal;
	int szSize;
	if (!PyArg_ParseTuple(args, "s#:MAPIUIDFromBinary", &szVal, &szSize))
		return NULL;
	if (szSize != sizeof(MAPIUID)) {
		PyErr_SetString(PyExc_ValueError, "The string is not a valid MAPIUID (bad size)");
		return NULL;
	}
	MAPIUID uid;
	memcpy(&uid, szVal, szSize);
	GUID *pTemp = (GUID *)&uid;
	return PyWinObject_FromIID( *pTemp );
}

PyObject *PyOpenIMsgSession(PyObject *self, PyObject *args)
{
	long flags = 0;
	if (!PyArg_ParseTuple(args, "|l:OpenIMsgOnIStg", &flags))
		return NULL;
	LPMALLOC pMalloc = MAPIGetDefaultMalloc();
	LPMSGSESS pSession = NULL;
	PY_INTERFACE_PRECALL;
	HRESULT hr = ::OpenIMsgSession( pMalloc, flags, &pSession);
	pMalloc->Release();
	PY_INTERFACE_POSTCALL;
	if (FAILED(hr))
		return OleSetOleError(hr);
	return PyInt_FromLong((long)pSession);
}

PyObject *PyCloseIMsgSession(PyObject *self, PyObject *args)
{
	long session = 0;
	if (!PyArg_ParseTuple(args, "l:CloseIMsgSession", &session))
		return NULL;
	PY_INTERFACE_PRECALL;
	::CloseIMsgSession( (LPMSGSESS)session );
	PY_INTERFACE_POSTCALL;
	Py_INCREF(Py_None);
	return Py_None;
}

PyObject *PyOpenIMsgOnIStg(PyObject *self, PyObject *args)
{
	PyObject *obMapiSupport;
	PyObject *obStorage;
	PyObject *obCallRelease = Py_None;
	long dwCallRelFlags = 0;
	long flags = 0;
	HRESULT hr = E_FAIL;
	PyObject *rc = NULL;
	long lSession;

	if (!PyArg_ParseTuple(args, "lOO|Oll:OpenIMsgOnIStg",
		&lSession, // @pyparm object|session||
		&obMapiSupport, // @pyparm <o PyIMAPISupport>|support||May be None
		&obStorage, // @pyparm <o PyIStorage>|storage||A <o PyIStorage> object that is open and has read-only or read/write access. Because IMessage does not support write-only access, OpenIMsgOnIStg does not accept a storage object opened in write-only mode.
		&obCallRelease, // @pyparm object|callback|None|Only None is supported.
		&dwCallRelFlags, // @pyparm int|callbackData|0|
		&flags)) // @pyparm int|flags|0|
		return NULL;

	if (obMapiSupport != Py_None || obCallRelease != Py_None) {
		PyErr_SetString(PyExc_TypeError, "Only None us supported for MAPISupport and CallRelease");
		return NULL;
	}
	IMAPISupport *pSupport = NULL;
	IStorage *pStorage = NULL;
	IMessage *pRet = NULL;

	if (!PyCom_InterfaceFromPyObject(obStorage, IID_IStorage, (void **)&pStorage, FALSE))
		goto done;

	{
	PY_INTERFACE_PRECALL;
	LPMALLOC pMalloc = MAPIGetDefaultMalloc();
	hr = ::OpenIMsgOnIStg((LPMSGSESS)lSession,
					  MAPIAllocateBuffer,
					  MAPIAllocateMore,
					  MAPIFreeBuffer,
					  pMalloc,
					  pSupport,
					  pStorage,
					NULL, dwCallRelFlags, flags, &pRet);
	if (pMalloc) pMalloc->Release();
	PY_INTERFACE_POSTCALL;
	}
	if (FAILED(hr)) {
		OleSetOleError(hr);
		goto done;
	}
	rc = PyCom_PyObjectFromIUnknown(pRet, IID_IMessage, /*BOOL bAddRef =*/ FALSE);
done:
	if (pSupport) pSupport->Release();
	if (pStorage) pStorage->Release();
	return rc;
}

// Code for converting RTF to HTML.
// Found at http://www.wischik.com/lu/programmer/mapi_utils.html
// MarkH converted it to Python, but was too slow.  Moving to a regex 
// based parser was too much work.

// DECODERTFHTML -- Given an uncompressed RTF body of the message,
// and assuming that it contains encoded-html, this function
// turns it onto regular html.
// [in] (buf,*len) indicate the start and length of the uncompressed RTF body.
// [out] the buffer is overwritten with the HTML version, null-terminated,
// and *len indicates the length of this HTML.
//
// Notes: (1) because of how the encoding works, the HTML version is necessarily
// shorter than the encoded version. That's why it's safe for the function to
// place the decoded html in the same buffer that formerly held the encoded stuff.
// (2) Some messages include characters \'XX, where XX is a hexedecimal number.
// This function simply converts this into ASCII. The conversion will only make
// sense if the right code-page is being used. I don't know how rtf specifies which
// code page it wants.
// (3) By experiment, I discovered that \pntext{..} and \liN and \fi-N are RTF
// markup that should be removed. There might be other RTF markup that should
// also be removed. But I don't know what else.
//
void decodertfhtml(char *buf,unsigned int *len)
{ // c -- pointer to where we're reading from
  // d -- pointer to where we're writing to. Invariant: d<c
  // max -- how far we can read from (i.e. to the end of the original rtf)
  // ignore_tag -- stores 'N': after \mhtmlN, we will ignore the subsequent \htmlN.
  char *c=buf, *max=buf+*len, *d=buf; int ignore_tag=-1;
  // First, we skip forwards to the first \htmltag.
  while (c<max && strncmp(c,"{\\*\\htmltag",11)!=0) c++;
  //
  // Now work through the document. Our plan is as follows:
  // * Ignore { and }. These are part of RTF markup.
  // * Ignore \htmlrtf...\htmlrtf0. This is how RTF keeps its equivalent markup separate from the html.
  // * Ignore \r and \n. The real carriage returns are stored in \par tags.
  // * Ignore \pntext{..} and \liN and \fi-N. These are RTF junk.
  // * Convert \par and \tab into \r\n and \t
  // * Convert \'XX into the ascii character indicated by the hex number XX
  // * Convert \{ and \} into { and }. This is how RTF escapes its curly braces.
  // * When we get \*\mhtmltagN, keep the tag, but ignore the subsequent \*\htmltagN
  // * When we get \*\htmltagN, keep the tag as long as it isn't subsequent to a \*\mhtmltagN
  // * All other text should be kept as it is.
  while (c<max)
  { if (*c=='{') c++;
    else if (*c=='}') c++;
    else if (strncmp(c,"\\*\\htmltag",10)==0)
    { c+=10; int tag=0; while (*c>='0' && *c<='9') {tag=tag*10+*c-'0'; c++;}
      if (*c==' ') c++;
      if (tag==ignore_tag) {while (c<max && *c!='}') c++; if (*c=='}') c++;}
      ignore_tag=-1;
    }
    else if (strncmp(c,"\\*\\mhtmltag",11)==0)
    { c+=11; int tag=0; while (*c>='0' && *c<='9') {tag=tag*10+*c-'0'; c++;}
      if (*c==' ') c++;
      ignore_tag=tag;
    }
    else if (strncmp(c,"\\par",4)==0) {strcpy(d,"\r\n"); d+=2; c+=4; if (*c==' ') c++;}
    else if (strncmp(c,"\\tab",4)==0) {strcpy(d,"   "); d+=3; c+=4; if (*c==' ') c++;}
    else if (strncmp(c,"\\li",3)==0)
    { c+=3; while (*c>='0' && *c<='9') c++; if (*c==' ') c++;
    }
    else if (strncmp(c,"\\fi-",4)==0)
    { c+=4; while (*c>='0' && *c<='9') c++; if (*c==' ') c++;
    }
    else if (strncmp(c,"\\'",2)==0)
    { unsigned int hi=c[2], lo=c[3];
      if (hi>='0' && hi<='9') hi-='0'; else if (hi>='A' && hi<='Z') hi=hi-'A'+10; else if (hi>='a' && hi<='z') hi=hi-'a'+10;
      if (lo>='0' && lo<='9') lo-='0'; else if (lo>='A' && lo<='Z') lo=lo-'A'+10; else if (lo>='a' && lo<='z') lo=lo-'a'+10;
      *((unsigned char*)d) = (unsigned char)(hi*16+lo);
      c+=4; d++;
    }
    else if (strncmp(c,"\\pntext",7)==0) {c+=7; while (c<max && *c!='}') c++;}
    else if (strncmp(c,"\\htmlrtf",8)==0)
    { c++; while (c<max && strncmp(c,"\\htmlrtf0",9)!=0) c++;
      if (c<max) c+=9; if (*c==' ') c++;
    }
    else if (*c=='\r' || *c=='\n') c++;
    else if (strncmp(c,"\\{",2)==0) {*d='{'; d++; c+=2;}
    else if (strncmp(c,"\\}",2)==0) {*d='}'; d++; c+=2;}
    else {*d=*c; c++; d++;}
  }
  *d=0; d++;
  *len = (unsigned int)(d-buf);
}


bool isrtfhtml(const char *buf,unsigned int len)
{ // We look for the words "\fromhtml" somewhere in the file.
  // If the rtf encodes text rather than html, then instead
  // it will only find "\fromtext".
  for (const char *c=buf; c<buf+len; c++)
  { if (strncmp(c,"\\from",5)==0) return strncmp(c,"\\fromhtml",9)==0;
  } return false;
}

// @pyswig |RTFStreamToHTML|
static PyObject *MyRTFStreamToHTML(PyObject *self, PyObject *args)
{
  PyObject *obStream;
  HRESULT hr;
  // @pyparm <o PyIStream>|The stream to read the uncompressed RTF from||
  if  (!PyArg_ParseTuple(args, "O:RTFStreamToHTML", &obStream))
    return NULL;
  IStream *pStream = NULL;

  if (!PyCom_InterfaceFromPyObject(obStream, IID_IStream, (void **)&pStream, FALSE))
    return NULL;

  // all exit from here via 'exit', and no Python until POSTCALL
  PY_INTERFACE_PRECALL;
  PyObject *ret = NULL;
  unsigned int bufsize=10240; 
  char *htmlbuf = (char *)malloc(bufsize);
  unsigned int htmlsize=0; bool done=(htmlbuf==NULL);
  while (!done)
  { ULONG red; hr = pStream->Read(htmlbuf+htmlsize, bufsize-htmlsize, &red);
    if (hr!=S_OK) {htmlbuf[htmlsize]=0; done=true;}
    else
    { htmlsize+=red; done = (red < bufsize-htmlsize);
      if (!done)
      { unsigned int newsize=2*htmlsize;
        htmlbuf = (char *)realloc(htmlbuf, newsize);
        bufsize=newsize;
      }
    }
  }
  bool ok;
  if (htmlbuf) {
    ok = isrtfhtml(htmlbuf,htmlsize);
    if (ok)
      decodertfhtml(htmlbuf,&htmlsize);
  }
  PY_INTERFACE_POSTCALL;
  if (htmlbuf==0) {
    PyErr_NoMemory();
    goto exit;
  }
  if (!ok) {
    Py_INCREF(Py_None);
    ret = Py_None;
    goto exit;
  }
  ret = PyString_FromStringAndSize(htmlbuf, htmlsize-1);
exit:
  if (pStream) pStream->Release();
  if (htmlbuf)
    free(htmlbuf);
  return ret;
}

PyObject *PyOpenStreamOnFile(PyObject *self, PyObject *args)
{	
		HRESULT hRes;
		unsigned long flags = 0;
		IStream *pStream;
		PyObject *obFilepath;
		
		if (!PyArg_ParseTuple(args, "O|l:OpenStreamOnFile", &obFilepath, &flags))
			return NULL;

		TCHAR *filepath;
		if (!PyWinObject_AsTCHAR(obFilepath, &filepath, FALSE))
			return NULL;

		PY_INTERFACE_PRECALL;
		hRes = OpenStreamOnFile(MAPIAllocateBuffer, MAPIFreeBuffer, flags, filepath, NULL, &pStream);
		PY_INTERFACE_POSTCALL;

		if (FAILED(hRes))
			return OleSetOleError(hRes);	
				
		return PyCom_PyObjectFromIUnknown(pStream, IID_IStream, FALSE);	
}
static PyObject *_wrap_MAPIInitialize(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    HRESULT  _result;
    MAPIINIT_0 * _arg0;
    MAPIINIT_0  temp;
    PyObject * _obj0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"O:MAPIInitialize",&_obj0)) 
        return NULL;
{
	_arg0 = &temp;
	if (_obj0==Py_None)
		_arg0 = NULL;
	else {
		if (!PyArg_ParseTuple(_obj0, "ii:MAPIINIT_0 tuple", &(_arg0->ulVersion), &(_arg0->ulFlags))) {
			;
			return NULL;
		}
	}
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (HRESULT )MAPIInitialize(_arg0);

      Py_END_ALLOW_THREADS
      if (FAILED(_result))  {
           
#ifdef SWIG_THIS_IID
           return PyCom_BuildPyException(_result, _swig_self,  SWIG_THIS_IID);
#else
           return PyCom_BuildPyException(_result);
#endif
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
    return _resultobj;
}

static PyObject *_wrap_MAPILogonEx(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    HRESULT  _result;
    ULONG  _arg0;
    TCHAR * _arg1;
    TCHAR * _arg2;
    FLAGS  _arg3;
    IMAPISession ** _arg4;
    IMAPISession * temp;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;

    self = self;
{
	_arg1 = NULL;
}
{
	_arg2 = NULL;
}
{
  _arg4 = &temp;
}
    if(!PyArg_ParseTuple(args,"lOOl:MAPILogonEx",&_arg0,&_obj1,&_obj2,&_arg3)) 
        return NULL;
{
	if (!PyWinObject_AsTCHAR(_obj1, &_arg1, TRUE))
		return NULL;
}
{
	if (!PyWinObject_AsTCHAR(_obj2, &_arg2, TRUE))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (HRESULT )MAPILogonEx(_arg0,_arg1,_arg2,_arg3,_arg4);

      Py_END_ALLOW_THREADS
      if (FAILED(_result))  {
           {
	PyWinObject_FreeTCHAR(_arg1);
}
{
	PyWinObject_FreeTCHAR(_arg2);
}

#ifdef SWIG_THIS_IID
           return PyCom_BuildPyException(_result, _swig_self,  SWIG_THIS_IID);
#else
           return PyCom_BuildPyException(_result);
#endif
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
{
	MAKE_OUTPUT_INTERFACE(_arg4, _resultobj, IID_IMAPISession)
}
{
	PyWinObject_FreeTCHAR(_arg1);
}
{
	PyWinObject_FreeTCHAR(_arg2);
}
    return _resultobj;
}

static PyObject *_wrap_MAPIAdminProfiles(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    HRESULT  _result;
    unsigned long  _arg0;
    IProfAdmin ** _arg1;
    IProfAdmin * temp;

    self = self;
{
  _arg1 = &temp;
}
    if(!PyArg_ParseTuple(args,"l:MAPIAdminProfiles",&_arg0)) 
        return NULL;
{
      Py_BEGIN_ALLOW_THREADS
          _result = (HRESULT )MAPIAdminProfiles(_arg0,_arg1);

      Py_END_ALLOW_THREADS
      if (FAILED(_result))  {
           
#ifdef SWIG_THIS_IID
           return PyCom_BuildPyException(_result, _swig_self,  SWIG_THIS_IID);
#else
           return PyCom_BuildPyException(_result);
#endif
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
{
	MAKE_OUTPUT_INTERFACE(_arg1, _resultobj, IID_IProfAdmin)
}
    return _resultobj;
}

static PyObject *_wrap_HrQueryAllRows(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    HRESULT  _result;
    IMAPITable * _arg0;
    SPropTagArray * _arg1;
    SRestriction * _arg2;
    SSortOrderSet * _arg3;
    long  _arg4;
    SRowSet ** _arg5;
    SRowSet * temp;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;

    self = self;
{
	_arg0 = NULL;
}
{
	_arg5 = &temp;
	*_arg5 = NULL;
}
    if(!PyArg_ParseTuple(args,"OOOOl:HrQueryAllRows",&_obj0,&_obj1,&_obj2,&_obj3,&_arg4)) 
        return NULL;
{
	if (!PyCom_InterfaceFromPyInstanceOrObject(_obj0, IID_IMAPITable, (void **)&_arg0, 0))
		return NULL;
}
{
	if (!PyMAPIObject_AsSPropTagArray(_obj1, &_arg1))
		return NULL;
}
{
	if (!PyMAPIObject_AsSRestriction(_obj2, &_arg2))
		return NULL;
}
{
	if (!PyMAPIObject_AsSSortOrderSet(_obj3, &_arg3))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (HRESULT )HrQueryAllRows(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

      Py_END_ALLOW_THREADS
      if (FAILED(_result))  {
           {
	if (_arg0) _arg0->Release();
}
{
	if (_arg1) MAPIFreeBuffer(_arg1);
}
{
	PyMAPIObject_FreeSRestriction(_arg2);
}
{
	PyMAPIObject_FreeSSortOrderSet(_arg3);
}
{
	if (*_arg5) PyMAPIObject_FreeSRowSet(*_arg5);
}

#ifdef SWIG_THIS_IID
           return PyCom_BuildPyException(_result, _swig_self,  SWIG_THIS_IID);
#else
           return PyCom_BuildPyException(_result);
#endif
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
{
	PyObject *o;
	o = PyMAPIObject_FromSRowSet(*_arg5);
	if (!_resultobj) {
		_resultobj = o;
	} else if (_resultobj == Py_None) {
		Py_DECREF(Py_None);
		_resultobj = o;
	} else {
		if (!PyList_Check(_resultobj)) {
			PyObject *o2 = _resultobj;
			_resultobj = PyList_New(0);
			PyList_Append(_resultobj,o2);
			Py_XDECREF(o2);
		}
		PyList_Append(_resultobj,o);
		Py_XDECREF(o);
	}
}
{
	if (_arg0) _arg0->Release();
}
{
	if (_arg1) MAPIFreeBuffer(_arg1);
}
{
	PyMAPIObject_FreeSRestriction(_arg2);
}
{
	PyMAPIObject_FreeSSortOrderSet(_arg3);
}
{
	if (*_arg5) PyMAPIObject_FreeSRowSet(*_arg5);
}
    return _resultobj;
}

static PyObject *_wrap_RTFSync(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    HRESULT  _result;
    IMessage * _arg0;
    unsigned long  _arg1;
    int * _arg2;
    int  temp;
    PyObject * _obj0 = 0;

    self = self;
{
	_arg0 = NULL;
}
{
  _arg2 = &temp;
}
    if(!PyArg_ParseTuple(args,"Ol:RTFSync",&_obj0,&_arg1)) 
        return NULL;
{
	if (!PyCom_InterfaceFromPyInstanceOrObject(_obj0, IID_IMessage, (void **)&_arg0, 0))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (HRESULT )RTFSync(_arg0,_arg1,_arg2);

      Py_END_ALLOW_THREADS
      if (FAILED(_result))  {
           {
	if (_arg0) _arg0->Release();
}

#ifdef SWIG_THIS_IID
           return PyCom_BuildPyException(_result, _swig_self,  SWIG_THIS_IID);
#else
           return PyCom_BuildPyException(_result);
#endif
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
{
    PyObject *o;
    o = PyInt_FromLong((long) (*_arg2));
    if (!_resultobj) {
      _resultobj = o;
    } else if (_resultobj == Py_None) {
      Py_DECREF(Py_None);
      _resultobj = o;
    } else {
      if (!PyList_Check(_resultobj)) {
	PyObject *o2 = _resultobj;
	_resultobj = PyList_New(0);
	PyList_Append(_resultobj,o2);
	Py_XDECREF(o2);
      }
      PyList_Append(_resultobj,o);
      Py_XDECREF(o);
    }
}
{
	if (_arg0) _arg0->Release();
}
    return _resultobj;
}

static PyObject *_wrap_WrapCompressedRTFStream(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    HRESULT  _result;
    IStream * _arg0;
    unsigned long  _arg1;
    IStream ** _arg2;
    IStream * temp;
    PyObject * _obj0 = 0;

    self = self;
{
  _arg2 = &temp;
}
    if(!PyArg_ParseTuple(args,"Ol:WrapCompressedRTFStream",&_obj0,&_arg1)) 
        return NULL;
{
	if (!PyCom_InterfaceFromPyInstanceOrObject(_obj0, IID_IStream, (void **)&_arg0, 0))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (HRESULT )WrapCompressedRTFStream(_arg0,_arg1,_arg2);

      Py_END_ALLOW_THREADS
      if (FAILED(_result))  {
           {
	if (_arg0) _arg0->Release();
}

#ifdef SWIG_THIS_IID
           return PyCom_BuildPyException(_result, _swig_self,  SWIG_THIS_IID);
#else
           return PyCom_BuildPyException(_result);
#endif
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
{
	MAKE_OUTPUT_INTERFACE(_arg2, _resultobj, IID_IStream)
}
{
	if (_arg0) _arg0->Release();
}
    return _resultobj;
}

static PyMethodDef mapiMethods[] = {
	 { "OpenStreamOnFile", PyOpenStreamOnFile, 1 },
	 { "RTFStreamToHTML", MyRTFStreamToHTML, 1 },
	 { "OpenIMsgOnIStg", PyOpenIMsgOnIStg, 1 },
	 { "CloseIMsgSession", PyCloseIMsgSession, 1 },
	 { "OpenIMsgSession", PyOpenIMsgSession, 1 },
	 { "MAPIUIDFromBinary", MAPIUIDFromBinary, 1 },
	 { "WrapCompressedRTFStream", _wrap_WrapCompressedRTFStream, 1 },
	 { "RTFSync", _wrap_RTFSync, 1 },
	 { "HrQueryAllRows", _wrap_HrQueryAllRows, 1 },
	 { "BinFromHex", PyBinFromHex, 1 },
	 { "HexFromBin", PyHexFromBin, 1 },
	 { "MAPIUninitialize", PyMAPIUninitialize, 1 },
	 { "MAPIAdminProfiles", _wrap_MAPIAdminProfiles, 1 },
	 { "MAPILogonEx", _wrap_MAPILogonEx, 1 },
	 { "MAPIInitialize", _wrap_MAPIInitialize, 1 },
	 { NULL, NULL }
};
static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
#if (PY_VERSION_HEX < 0x03000000)
#define MODINIT_ERROR_RETURN
SWIGEXPORT(void,initmapi)() {
#else
#define MODINIT_ERROR_RETURN NULL
SWIGEXPORT(PyObject*,  PyInit_mapi)(void) {
#endif
	 PyObject *m, *d;
	 SWIG_globals = SWIG_newvarlink();
#if (PY_VERSION_HEX < 0x03000000)
	 m = Py_InitModule("mapi", mapiMethods);
	 d = PyModule_GetDict(m);
#else
  static PyModuleDef mapi_def = {
    PyModuleDef_HEAD_INIT,
      "mapi",
      "",
      -1,
      mapiMethods,
      };
  m = PyModule_Create(&mapi_def);
  if (!m)
    return NULL;
  d = PyModule_GetDict(m);
  if (!d)
    return NULL;
#endif

#ifndef SWIG_PYTHONCOM
/* This code only valid if non COM SWIG builds */
#ifndef PYCOM_EXPORT
	 PyDict_SetItemString(d,"UNICODE", PyInt_FromLong(
#ifdef UNICODE
	1
#else
	0
#endif
	));
#endif
  PyWinGlobals_Ensure();
  PyDict_SetItemString(d, "error", PyWinExc_ApiError);
#endif SWIG_PYTHONCOM

	if ( PyCom_RegisterClientType(&PyIMAPISession::type, &IID_IMAPISession) != 0 ) return MODINIT_ERROR_RETURN;
	ADD_IID(IID_IMAPISession);

	if ( PyCom_RegisterClientType(&PyIMAPIStatus::type, &IID_IMAPIStatus) != 0 ) return MODINIT_ERROR_RETURN;
	ADD_IID(IID_IMAPIStatus);

	if ( PyCom_RegisterClientType(&PyIMAPITable::type, &IID_IMAPITable) != 0 ) return MODINIT_ERROR_RETURN;
	ADD_IID(IID_IMAPITable);

	if ( PyCom_RegisterClientType(&PyIMAPIProp::type, &IID_IMAPIProp) != 0 ) return MODINIT_ERROR_RETURN;
	ADD_IID(IID_IMAPIProp);

	if ( PyCom_RegisterClientType(&PyIMAPIFolder::type, &IID_IMAPIFolder) != 0 ) return MODINIT_ERROR_RETURN;
	ADD_IID(IID_IMAPIFolder);

	if ( PyCom_RegisterClientType(&PyIMAPIContainer::type, &IID_IMAPIContainer) != 0 ) return MODINIT_ERROR_RETURN;
	ADD_IID(IID_IMAPIContainer);

	if ( PyCom_RegisterClientType(&PyIMessage::type, &IID_IMessage) != 0 ) return MODINIT_ERROR_RETURN;
	ADD_IID(IID_IMessage);

	if ( PyCom_RegisterClientType(&PyIMsgStore::type, &IID_IMsgStore) != 0 ) return MODINIT_ERROR_RETURN;
	ADD_IID(IID_IMsgStore);

	if ( PyCom_RegisterClientType(&PyIAttach::type, &IID_IAttachment) != 0 ) return MODINIT_ERROR_RETURN;
	ADD_IID(IID_IAttachment);

	if ( PyCom_RegisterClientType(&PyIProfAdmin::type, &IID_IProfAdmin) != 0 ) return MODINIT_ERROR_RETURN;
	ADD_IID(IID_IProfAdmin);

	if ( PyCom_RegisterClientType(&PyIAddrBook::type, &IID_IAddrBook) != 0 ) return MODINIT_ERROR_RETURN;
	ADD_IID(IID_IAddrBook);

	if ( PyCom_RegisterClientType(&PyIDistList::type, &IID_IDistList) != 0 ) return MODINIT_ERROR_RETURN;
	ADD_IID(IID_IDistList);

	if ( PyCom_RegisterClientType(&PyIMailUser::type, &IID_IMailUser) != 0 ) return MODINIT_ERROR_RETURN;
	ADD_IID(IID_IMailUser);

	if ( PyCom_RegisterClientType(&PyIABContainer::type, &IID_IABContainer) != 0 ) return MODINIT_ERROR_RETURN;
	ADD_IID(IID_IABContainer);

	if ( PyCom_RegisterClientType(&PyIProfSect::type, &IID_IProfSect) != 0 ) return MODINIT_ERROR_RETURN;
	ADD_IID(IID_IProfSect);

	if ( PyCom_RegisterClientType(&PyIMsgServiceAdmin::type, &IID_IMsgServiceAdmin) != 0 ) return MODINIT_ERROR_RETURN;
	ADD_IID(IID_IMsgServiceAdmin);

        if ( PyCom_RegisterGatewayObject(IID_IMAPIAdviseSink, GET_PYGATEWAY_CTOR(PyGMAPIAdviseSink), "IMAPIAdviseSink") != 0) return MODINIT_ERROR_RETURN;
	ADD_IID(IID_IMAPIAdviseSink);

	if ( PyCom_RegisterClientType(&PyIConverterSession::type, &IID_IConverterSession) != 0 ) return MODINIT_ERROR_RETURN;
	{
		ADD_IID(IID_IConverterSession);
		ADD_IID(CLSID_IConverterSession);
	}
	
	ADD_IID(PS_PUBLIC_STRINGS);
	ADD_IID(PS_MAPI);
	ADD_IID(PS_ROUTING_EMAIL_ADDRESSES);
	ADD_IID(PS_ROUTING_ADDRTYPE);
	ADD_IID(PS_ROUTING_DISPLAY_NAME);
	ADD_IID(PS_ROUTING_ENTRYID);
	ADD_IID(PS_ROUTING_SEARCH_KEY);
	 PyDict_SetItemString(d,"NO_ATTACHMENT", PyInt_FromLong((long) NO_ATTACHMENT));
	 PyDict_SetItemString(d,"ATTACH_BY_VALUE", PyInt_FromLong((long) ATTACH_BY_VALUE));
	 PyDict_SetItemString(d,"ATTACH_BY_REFERENCE", PyInt_FromLong((long) ATTACH_BY_REFERENCE));
	 PyDict_SetItemString(d,"ATTACH_BY_REF_RESOLVE", PyInt_FromLong((long) ATTACH_BY_REF_RESOLVE));
	 PyDict_SetItemString(d,"ATTACH_BY_REF_ONLY", PyInt_FromLong((long) ATTACH_BY_REF_ONLY));
	 PyDict_SetItemString(d,"ATTACH_EMBEDDED_MSG", PyInt_FromLong((long) ATTACH_EMBEDDED_MSG));
	 PyDict_SetItemString(d,"ATTACH_OLE", PyInt_FromLong((long) ATTACH_OLE));
	 PyDict_SetItemString(d,"CONVENIENT_DEPTH", PyInt_FromLong((long) CONVENIENT_DEPTH));
	 PyDict_SetItemString(d,"FOLDER_GENERIC", PyInt_FromLong((long) FOLDER_GENERIC));
	 PyDict_SetItemString(d,"FOLDER_SEARCH", PyInt_FromLong((long) FOLDER_SEARCH));
	 PyDict_SetItemString(d,"FORCE_SAVE", PyInt_FromLong((long) FORCE_SAVE));
	 PyDict_SetItemString(d,"KEEP_OPEN_READONLY", PyInt_FromLong((long) KEEP_OPEN_READONLY));
	 PyDict_SetItemString(d,"KEEP_OPEN_READWRITE", PyInt_FromLong((long) KEEP_OPEN_READWRITE));
	 PyDict_SetItemString(d,"MAPI_DIALOG", PyInt_FromLong((long) MAPI_DIALOG));
	 PyDict_SetItemString(d,"MAPI_ASSOCIATED", PyInt_FromLong((long) MAPI_ASSOCIATED));
	 PyDict_SetItemString(d,"MAPI_ALLOW_OTHERS", PyInt_FromLong((long) MAPI_ALLOW_OTHERS));
	 PyDict_SetItemString(d,"MAPI_EXPLICIT_PROFILE", PyInt_FromLong((long) MAPI_EXPLICIT_PROFILE));
	 PyDict_SetItemString(d,"MAPI_EXTENDED", PyInt_FromLong((long) MAPI_EXTENDED));
	 PyDict_SetItemString(d,"MAPI_FORCE_DOWNLOAD", PyInt_FromLong((long) MAPI_FORCE_DOWNLOAD));
	 PyDict_SetItemString(d,"MAPI_LOGON_UI", PyInt_FromLong((long) MAPI_LOGON_UI));
	 PyDict_SetItemString(d,"MAPI_NEW_SESSION", PyInt_FromLong((long) MAPI_NEW_SESSION));
	 PyDict_SetItemString(d,"MAPI_NO_MAIL", PyInt_FromLong((long) MAPI_NO_MAIL));
	 PyDict_SetItemString(d,"MAPI_MULTITHREAD_NOTIFICATIONS", PyInt_FromLong((long) MAPI_MULTITHREAD_NOTIFICATIONS));
	 PyDict_SetItemString(d,"MAPI_NT_SERVICE", PyInt_FromLong((long) MAPI_NT_SERVICE));
	 PyDict_SetItemString(d,"MAPI_PASSWORD_UI", PyInt_FromLong((long) MAPI_PASSWORD_UI));
	 PyDict_SetItemString(d,"MAPI_SERVICE_UI_ALWAYS", PyInt_FromLong((long) MAPI_SERVICE_UI_ALWAYS));
	 PyDict_SetItemString(d,"MAPI_TIMEOUT_SHORT", PyInt_FromLong((long) MAPI_TIMEOUT_SHORT));
	 PyDict_SetItemString(d,"MAPI_UNICODE", PyInt_FromLong((long) MAPI_UNICODE));
	 PyDict_SetItemString(d,"MAPI_USE_DEFAULT", PyInt_FromLong((long) MAPI_USE_DEFAULT));
	 PyDict_SetItemString(d,"MAPI_BEST_ACCESS", PyInt_FromLong((long) MAPI_BEST_ACCESS));
	 PyDict_SetItemString(d,"MAPI_MODIFY", PyInt_FromLong((long) MAPI_MODIFY));
	 PyDict_SetItemString(d,"MAPI_DEFERRED_ERRORS", PyInt_FromLong((long) MAPI_DEFERRED_ERRORS));
	 PyDict_SetItemString(d,"MAPI_INIT_VERSION", PyInt_FromLong((long) MAPI_INIT_VERSION));
	 PyDict_SetItemString(d,"MDB_NO_DIALOG", PyInt_FromLong((long) MDB_NO_DIALOG));
	 PyDict_SetItemString(d,"MDB_NO_MAIL", PyInt_FromLong((long) MDB_NO_MAIL));
	 PyDict_SetItemString(d,"MDB_TEMPORARY", PyInt_FromLong((long) MDB_TEMPORARY));
	 PyDict_SetItemString(d,"MDB_WRITE", PyInt_FromLong((long) MDB_WRITE));
	 PyDict_SetItemString(d,"OPEN_IF_EXISTS", PyInt_FromLong((long) OPEN_IF_EXISTS));
	 PyDict_SetItemString(d,"RTF_SYNC_BODY_CHANGED", PyInt_FromLong((long) RTF_SYNC_BODY_CHANGED));
	 PyDict_SetItemString(d,"RTF_SYNC_RTF_CHANGED", PyInt_FromLong((long) RTF_SYNC_RTF_CHANGED));
	 PyDict_SetItemString(d,"MAPI_CREATE", PyInt_FromLong((long) MAPI_CREATE));
	 PyDict_SetItemString(d,"MAPI_E_CALL_FAILED", PyInt_FromLong((long) MAPI_E_CALL_FAILED));
	 PyDict_SetItemString(d,"MAPI_E_NOT_ENOUGH_MEMORY", PyInt_FromLong((long) MAPI_E_NOT_ENOUGH_MEMORY));
	 PyDict_SetItemString(d,"MAPI_E_INVALID_PARAMETER", PyInt_FromLong((long) MAPI_E_INVALID_PARAMETER));
	 PyDict_SetItemString(d,"MAPI_E_INTERFACE_NOT_SUPPORTED", PyInt_FromLong((long) MAPI_E_INTERFACE_NOT_SUPPORTED));
	 PyDict_SetItemString(d,"MAPI_E_NO_ACCESS", PyInt_FromLong((long) MAPI_E_NO_ACCESS));
	 PyDict_SetItemString(d,"MAPI_E_NO_SUPPORT", PyInt_FromLong((long) MAPI_E_NO_SUPPORT));
	 PyDict_SetItemString(d,"MAPI_E_BAD_CHARWIDTH", PyInt_FromLong((long) MAPI_E_BAD_CHARWIDTH));
	 PyDict_SetItemString(d,"MAPI_E_STRING_TOO_LONG", PyInt_FromLong((long) MAPI_E_STRING_TOO_LONG));
	 PyDict_SetItemString(d,"MAPI_E_UNKNOWN_FLAGS", PyInt_FromLong((long) MAPI_E_UNKNOWN_FLAGS));
	 PyDict_SetItemString(d,"MAPI_E_INVALID_ENTRYID", PyInt_FromLong((long) MAPI_E_INVALID_ENTRYID));
	 PyDict_SetItemString(d,"MAPI_E_INVALID_OBJECT", PyInt_FromLong((long) MAPI_E_INVALID_OBJECT));
	 PyDict_SetItemString(d,"MAPI_E_OBJECT_CHANGED", PyInt_FromLong((long) MAPI_E_OBJECT_CHANGED));
	 PyDict_SetItemString(d,"MAPI_E_OBJECT_DELETED", PyInt_FromLong((long) MAPI_E_OBJECT_DELETED));
	 PyDict_SetItemString(d,"MAPI_E_BUSY", PyInt_FromLong((long) MAPI_E_BUSY));
	 PyDict_SetItemString(d,"MAPI_E_NOT_ENOUGH_DISK", PyInt_FromLong((long) MAPI_E_NOT_ENOUGH_DISK));
	 PyDict_SetItemString(d,"MAPI_E_NOT_ENOUGH_RESOURCES", PyInt_FromLong((long) MAPI_E_NOT_ENOUGH_RESOURCES));
	 PyDict_SetItemString(d,"MAPI_E_NOT_FOUND", PyInt_FromLong((long) MAPI_E_NOT_FOUND));
	 PyDict_SetItemString(d,"MAPI_E_VERSION", PyInt_FromLong((long) MAPI_E_VERSION));
	 PyDict_SetItemString(d,"MAPI_E_LOGON_FAILED", PyInt_FromLong((long) MAPI_E_LOGON_FAILED));
	 PyDict_SetItemString(d,"MAPI_E_SESSION_LIMIT", PyInt_FromLong((long) MAPI_E_SESSION_LIMIT));
	 PyDict_SetItemString(d,"MAPI_E_USER_CANCEL", PyInt_FromLong((long) MAPI_E_USER_CANCEL));
	 PyDict_SetItemString(d,"MAPI_E_UNABLE_TO_ABORT", PyInt_FromLong((long) MAPI_E_UNABLE_TO_ABORT));
	 PyDict_SetItemString(d,"MAPI_E_NETWORK_ERROR", PyInt_FromLong((long) MAPI_E_NETWORK_ERROR));
	 PyDict_SetItemString(d,"MAPI_E_DISK_ERROR", PyInt_FromLong((long) MAPI_E_DISK_ERROR));
	 PyDict_SetItemString(d,"MAPI_E_TOO_COMPLEX", PyInt_FromLong((long) MAPI_E_TOO_COMPLEX));
	 PyDict_SetItemString(d,"MAPI_E_BAD_COLUMN", PyInt_FromLong((long) MAPI_E_BAD_COLUMN));
	 PyDict_SetItemString(d,"MAPI_E_EXTENDED_ERROR", PyInt_FromLong((long) MAPI_E_EXTENDED_ERROR));
	 PyDict_SetItemString(d,"MAPI_E_COMPUTED", PyInt_FromLong((long) MAPI_E_COMPUTED));
	 PyDict_SetItemString(d,"MAPI_E_CORRUPT_DATA", PyInt_FromLong((long) MAPI_E_CORRUPT_DATA));
	 PyDict_SetItemString(d,"MAPI_E_UNCONFIGURED", PyInt_FromLong((long) MAPI_E_UNCONFIGURED));
	 PyDict_SetItemString(d,"MAPI_E_FAILONEPROVIDER", PyInt_FromLong((long) MAPI_E_FAILONEPROVIDER));
	 PyDict_SetItemString(d,"MAPI_E_UNKNOWN_CPID", PyInt_FromLong((long) MAPI_E_UNKNOWN_CPID));
	 PyDict_SetItemString(d,"MAPI_E_UNKNOWN_LCID", PyInt_FromLong((long) MAPI_E_UNKNOWN_LCID));
	 PyDict_SetItemString(d,"MAPI_E_PASSWORD_CHANGE_REQUIRED", PyInt_FromLong((long) MAPI_E_PASSWORD_CHANGE_REQUIRED));
	 PyDict_SetItemString(d,"MAPI_E_PASSWORD_EXPIRED", PyInt_FromLong((long) MAPI_E_PASSWORD_EXPIRED));
	 PyDict_SetItemString(d,"MAPI_E_INVALID_WORKSTATION_ACCOUNT", PyInt_FromLong((long) MAPI_E_INVALID_WORKSTATION_ACCOUNT));
	 PyDict_SetItemString(d,"MAPI_E_INVALID_ACCESS_TIME", PyInt_FromLong((long) MAPI_E_INVALID_ACCESS_TIME));
	 PyDict_SetItemString(d,"MAPI_E_ACCOUNT_DISABLED", PyInt_FromLong((long) MAPI_E_ACCOUNT_DISABLED));
	 PyDict_SetItemString(d,"MAPI_E_END_OF_SESSION", PyInt_FromLong((long) MAPI_E_END_OF_SESSION));
	 PyDict_SetItemString(d,"MAPI_E_UNKNOWN_ENTRYID", PyInt_FromLong((long) MAPI_E_UNKNOWN_ENTRYID));
	 PyDict_SetItemString(d,"MAPI_E_MISSING_REQUIRED_COLUMN", PyInt_FromLong((long) MAPI_E_MISSING_REQUIRED_COLUMN));
	 PyDict_SetItemString(d,"MAPI_W_NO_SERVICE", PyInt_FromLong((long) MAPI_W_NO_SERVICE));
	 PyDict_SetItemString(d,"MAPI_E_BAD_VALUE", PyInt_FromLong((long) MAPI_E_BAD_VALUE));
	 PyDict_SetItemString(d,"MAPI_E_INVALID_TYPE", PyInt_FromLong((long) MAPI_E_INVALID_TYPE));
	 PyDict_SetItemString(d,"MAPI_E_TYPE_NO_SUPPORT", PyInt_FromLong((long) MAPI_E_TYPE_NO_SUPPORT));
	 PyDict_SetItemString(d,"MAPI_E_UNEXPECTED_TYPE", PyInt_FromLong((long) MAPI_E_UNEXPECTED_TYPE));
	 PyDict_SetItemString(d,"MAPI_E_TOO_BIG", PyInt_FromLong((long) MAPI_E_TOO_BIG));
	 PyDict_SetItemString(d,"MAPI_E_DECLINE_COPY", PyInt_FromLong((long) MAPI_E_DECLINE_COPY));
	 PyDict_SetItemString(d,"MAPI_E_UNEXPECTED_ID", PyInt_FromLong((long) MAPI_E_UNEXPECTED_ID));
	 PyDict_SetItemString(d,"MAPI_W_ERRORS_RETURNED", PyInt_FromLong((long) MAPI_W_ERRORS_RETURNED));
	 PyDict_SetItemString(d,"MAPI_E_UNABLE_TO_COMPLETE", PyInt_FromLong((long) MAPI_E_UNABLE_TO_COMPLETE));
	 PyDict_SetItemString(d,"MAPI_E_TIMEOUT", PyInt_FromLong((long) MAPI_E_TIMEOUT));
	 PyDict_SetItemString(d,"MAPI_E_TABLE_EMPTY", PyInt_FromLong((long) MAPI_E_TABLE_EMPTY));
	 PyDict_SetItemString(d,"MAPI_E_TABLE_TOO_BIG", PyInt_FromLong((long) MAPI_E_TABLE_TOO_BIG));
	 PyDict_SetItemString(d,"MAPI_E_INVALID_BOOKMARK", PyInt_FromLong((long) MAPI_E_INVALID_BOOKMARK));
	 PyDict_SetItemString(d,"MAPI_W_POSITION_CHANGED", PyInt_FromLong((long) MAPI_W_POSITION_CHANGED));
	 PyDict_SetItemString(d,"MAPI_W_APPROX_COUNT", PyInt_FromLong((long) MAPI_W_APPROX_COUNT));
	 PyDict_SetItemString(d,"MAPI_E_WAIT", PyInt_FromLong((long) MAPI_E_WAIT));
	 PyDict_SetItemString(d,"MAPI_E_CANCEL", PyInt_FromLong((long) MAPI_E_CANCEL));
	 PyDict_SetItemString(d,"MAPI_E_NOT_ME", PyInt_FromLong((long) MAPI_E_NOT_ME));
	 PyDict_SetItemString(d,"MAPI_W_CANCEL_MESSAGE", PyInt_FromLong((long) MAPI_W_CANCEL_MESSAGE));
	 PyDict_SetItemString(d,"MAPI_E_CORRUPT_STORE", PyInt_FromLong((long) MAPI_E_CORRUPT_STORE));
	 PyDict_SetItemString(d,"MAPI_E_NOT_IN_QUEUE", PyInt_FromLong((long) MAPI_E_NOT_IN_QUEUE));
	 PyDict_SetItemString(d,"MAPI_E_NO_SUPPRESS", PyInt_FromLong((long) MAPI_E_NO_SUPPRESS));
	 PyDict_SetItemString(d,"MAPI_E_COLLISION", PyInt_FromLong((long) MAPI_E_COLLISION));
	 PyDict_SetItemString(d,"MAPI_E_NOT_INITIALIZED", PyInt_FromLong((long) MAPI_E_NOT_INITIALIZED));
	 PyDict_SetItemString(d,"MAPI_E_NON_STANDARD", PyInt_FromLong((long) MAPI_E_NON_STANDARD));
	 PyDict_SetItemString(d,"MAPI_E_NO_RECIPIENTS", PyInt_FromLong((long) MAPI_E_NO_RECIPIENTS));
	 PyDict_SetItemString(d,"MAPI_E_SUBMITTED", PyInt_FromLong((long) MAPI_E_SUBMITTED));
	 PyDict_SetItemString(d,"MAPI_E_HAS_FOLDERS", PyInt_FromLong((long) MAPI_E_HAS_FOLDERS));
	 PyDict_SetItemString(d,"MAPI_E_HAS_MESSAGES", PyInt_FromLong((long) MAPI_E_HAS_MESSAGES));
	 PyDict_SetItemString(d,"MAPI_E_FOLDER_CYCLE", PyInt_FromLong((long) MAPI_E_FOLDER_CYCLE));
	 PyDict_SetItemString(d,"MAPI_W_PARTIAL_COMPLETION", PyInt_FromLong((long) MAPI_W_PARTIAL_COMPLETION));
	 PyDict_SetItemString(d,"MAPI_E_AMBIGUOUS_RECIP", PyInt_FromLong((long) MAPI_E_AMBIGUOUS_RECIP));
	 PyDict_SetItemString(d,"MODRECIP_ADD", PyInt_FromLong((long) MODRECIP_ADD));
	 PyDict_SetItemString(d,"MODRECIP_MODIFY", PyInt_FromLong((long) MODRECIP_MODIFY));
	 PyDict_SetItemString(d,"MODRECIP_REMOVE", PyInt_FromLong((long) MODRECIP_REMOVE));
	 PyDict_SetItemString(d,"MAPI_TO", PyInt_FromLong((long) MAPI_TO));
	 PyDict_SetItemString(d,"MAPI_CC", PyInt_FromLong((long) MAPI_CC));
	 PyDict_SetItemString(d,"MAPI_BCC", PyInt_FromLong((long) MAPI_BCC));
	 PyDict_SetItemString(d,"MAPI_P1", PyInt_FromLong((long) MAPI_P1));
	 PyDict_SetItemString(d,"MAPI_SUBMITTED", PyInt_FromLong((long) MAPI_SUBMITTED));
	 PyDict_SetItemString(d,"MAPI_DEFAULT_SERVICES", PyInt_FromLong((long) MAPI_DEFAULT_SERVICES));
	 PyDict_SetItemString(d,"MAPI_NO_IDS", PyInt_FromLong((long) MAPI_NO_IDS));
	 PyDict_SetItemString(d,"MAPI_NO_STRINGS", PyInt_FromLong((long) MAPI_NO_STRINGS));
	 PyDict_SetItemString(d,"SERVICE_UI_ALLOWED", PyInt_FromLong((long) SERVICE_UI_ALLOWED));
	 PyDict_SetItemString(d,"SERVICE_UI_ALWAYS", PyInt_FromLong((long) SERVICE_UI_ALWAYS));
	 PyDict_SetItemString(d,"AB_NO_DIALOG", PyInt_FromLong((long) AB_NO_DIALOG));
	 PyDict_SetItemString(d,"BOOKMARK_BEGINNING", PyInt_FromLong((long) BOOKMARK_BEGINNING));
	 PyDict_SetItemString(d,"BOOKMARK_CURRENT", PyInt_FromLong((long) BOOKMARK_CURRENT));
	 PyDict_SetItemString(d,"BOOKMARK_END", PyInt_FromLong((long) BOOKMARK_END));
	 PyDict_SetItemString(d,"TBL_ASYNC", PyInt_FromLong((long) TBL_ASYNC));
	 PyDict_SetItemString(d,"TBL_BATCH", PyInt_FromLong((long) TBL_BATCH));
	 PyDict_SetItemString(d,"RES_AND", PyInt_FromLong((long) RES_AND));
	 PyDict_SetItemString(d,"RES_BITMASK", PyInt_FromLong((long) RES_BITMASK));
	 PyDict_SetItemString(d,"RES_COMMENT", PyInt_FromLong((long) RES_COMMENT));
	 PyDict_SetItemString(d,"RES_COMPAREPROPS", PyInt_FromLong((long) RES_COMPAREPROPS));
	 PyDict_SetItemString(d,"RES_CONTENT", PyInt_FromLong((long) RES_CONTENT));
	 PyDict_SetItemString(d,"RES_EXIST", PyInt_FromLong((long) RES_EXIST));
	 PyDict_SetItemString(d,"RES_NOT", PyInt_FromLong((long) RES_NOT));
	 PyDict_SetItemString(d,"RES_OR", PyInt_FromLong((long) RES_OR));
	 PyDict_SetItemString(d,"RES_PROPERTY", PyInt_FromLong((long) RES_PROPERTY));
	 PyDict_SetItemString(d,"RES_SIZE", PyInt_FromLong((long) RES_SIZE));
	 PyDict_SetItemString(d,"RES_SUBRESTRICTION", PyInt_FromLong((long) RES_SUBRESTRICTION));
	 PyDict_SetItemString(d,"RELOP_GE", PyInt_FromLong((long) RELOP_GE));
	 PyDict_SetItemString(d,"RELOP_GT", PyInt_FromLong((long) RELOP_GT));
	 PyDict_SetItemString(d,"RELOP_LE", PyInt_FromLong((long) RELOP_LE));
	 PyDict_SetItemString(d,"RELOP_LT", PyInt_FromLong((long) RELOP_LT));
	 PyDict_SetItemString(d,"RELOP_NE", PyInt_FromLong((long) RELOP_NE));
	 PyDict_SetItemString(d,"RELOP_RE", PyInt_FromLong((long) RELOP_RE));
	 PyDict_SetItemString(d,"RELOP_EQ", PyInt_FromLong((long) RELOP_EQ));
	 PyDict_SetItemString(d,"BMR_EQZ", PyInt_FromLong((long) BMR_EQZ));
	 PyDict_SetItemString(d,"BMR_NEZ", PyInt_FromLong((long) BMR_NEZ));
	 PyDict_SetItemString(d,"DIR_BACKWARD", PyInt_FromLong((long) DIR_BACKWARD));
	 PyDict_SetItemString(d,"FL_FULLSTRING", PyInt_FromLong((long) FL_FULLSTRING));
	 PyDict_SetItemString(d,"FL_PREFIX", PyInt_FromLong((long) FL_PREFIX));
	 PyDict_SetItemString(d,"FL_SUBSTRING", PyInt_FromLong((long) FL_SUBSTRING));
	 PyDict_SetItemString(d,"FL_IGNORECASE", PyInt_FromLong((long) FL_IGNORECASE));
	 PyDict_SetItemString(d,"FL_IGNORENONSPACE", PyInt_FromLong((long) FL_IGNORENONSPACE));
	 PyDict_SetItemString(d,"FL_LOOSE", PyInt_FromLong((long) FL_LOOSE));
	 PyDict_SetItemString(d,"STATUS_DEFAULT_STORE", PyInt_FromLong((long) STATUS_DEFAULT_STORE));
	 PyDict_SetItemString(d,"TABLE_SORT_ASCEND", PyInt_FromLong((long) TABLE_SORT_ASCEND));
	 PyDict_SetItemString(d,"TABLE_SORT_COMBINE", PyInt_FromLong((long) TABLE_SORT_COMBINE));
	 PyDict_SetItemString(d,"TABLE_SORT_DESCEND", PyInt_FromLong((long) TABLE_SORT_DESCEND));
	 PyDict_SetItemString(d,"TBL_ALL_COLUMNS", PyInt_FromLong((long) TBL_ALL_COLUMNS));
	 PyDict_SetItemString(d,"STATUS_FLUSH_QUEUES", PyInt_FromLong((long) STATUS_FLUSH_QUEUES));
	 PyDict_SetItemString(d,"STATUS_INBOUND_FLUSH", PyInt_FromLong((long) STATUS_INBOUND_FLUSH));
	 PyDict_SetItemString(d,"STATUS_OUTBOUND_FLUSH", PyInt_FromLong((long) STATUS_OUTBOUND_FLUSH));
	 PyDict_SetItemString(d,"FLUSH_UPLOAD", PyInt_FromLong((long) FLUSH_UPLOAD));
	 PyDict_SetItemString(d,"FLUSH_DOWNLOAD", PyInt_FromLong((long) FLUSH_DOWNLOAD));
	 PyDict_SetItemString(d,"FLUSH_FORCE", PyInt_FromLong((long) FLUSH_FORCE));
	 PyDict_SetItemString(d,"FLUSH_NO_UI", PyInt_FromLong((long) FLUSH_NO_UI));
	 PyDict_SetItemString(d,"FLUSH_ASYNC_OK", PyInt_FromLong((long) FLUSH_ASYNC_OK));
	 PyDict_SetItemString(d,"CCSF_SMTP", PyInt_FromLong((long) CCSF_SMTP));
	 PyDict_SetItemString(d,"CCSF_NOHEADERS", PyInt_FromLong((long) CCSF_NOHEADERS));
	 PyDict_SetItemString(d,"CCSF_USE_TNEF", PyInt_FromLong((long) CCSF_USE_TNEF));
	 PyDict_SetItemString(d,"CCSF_INCLUDE_BCC", PyInt_FromLong((long) CCSF_INCLUDE_BCC));
	 PyDict_SetItemString(d,"CCSF_8BITHEADERS", PyInt_FromLong((long) CCSF_8BITHEADERS));
	 PyDict_SetItemString(d,"CCSF_USE_RTF", PyInt_FromLong((long) CCSF_USE_RTF));
	 PyDict_SetItemString(d,"CCSF_PLAIN_TEXT_ONLY", PyInt_FromLong((long) CCSF_PLAIN_TEXT_ONLY));
	 PyDict_SetItemString(d,"CCSF_NO_MSGID", PyInt_FromLong((long) CCSF_NO_MSGID));
	 PyDict_SetItemString(d,"CCSF_EMBEDDED_MESSAGE", PyInt_FromLong((long) CCSF_EMBEDDED_MESSAGE));
	 PyDict_SetItemString(d,"CCSF_PRESERVE_SOURCE", PyInt_FromLong((long) CCSF_PRESERVE_SOURCE));
#if (PY_VERSION_HEX > 0x03000000)
	return m;
#endif
}
